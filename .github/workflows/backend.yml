name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/backend/**'
      - '.github/workflows/backend.yml'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/backend/**'
  workflow_dispatch:
    inputs:
      skip_deploy:
        description: 'Skip deployment step'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: public.ecr.aws
  IMAGE_NAME: vgl-backend

jobs:
  # PHP Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test_app
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: swoole, pdo, pdo_mysql, pdo_sqlite
        coverage: xdebug

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: packages/backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('packages/backend/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      working-directory: packages/backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create .env file for testing
      working-directory: packages/backend
      run: |
        cp .env.example .env
        echo "DB_DRIVER=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_NAME=test_app" >> .env
        echo "DB_USER=test_user" >> .env
        echo "DB_PASS=test_pass" >> .env

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h127.0.0.1 -P3306 -utest_user -ptest_pass --silent; do
          sleep 1
        done

    - name: Run PHP Code Sniffer
      working-directory: packages/backend
      run: composer run lint
      continue-on-error: true

    - name: Run PHPStan
      working-directory: packages/backend
      run: composer run stan
      continue-on-error: true

    - name: Run PHPUnit tests
      working-directory: packages/backend
      run: composer run test
      continue-on-error: true

  # Docker Build and Security Scan
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: packages/backend
        file: packages/backend/Dockerfile
        target: production
        platforms: linux/amd64,linux/arm64
        push: false
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with docker-compose
      run: |
        docker-compose up -d mysql backend
        sleep 30

    - name: Wait for backend health check
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8080/health
        
        # Test artists endpoint
        curl -f http://localhost:8080/artists
        
        # Test albums endpoint
        curl -f http://localhost:8080/albums
        
        # Test genres endpoint
        curl -f http://localhost:8080/genres

    - name: Stop services
      if: always()
      run: docker-compose down

  # Build and Push to ECR (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.skip_deploy != true
    needs: [test, build, integration]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: packages/backend
        file: packages/backend/Dockerfile
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to ECS
      env:
        ECR_REGISTRY: ${{ env.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service ${{ secrets.ECS_SERVICE_NAME }}-backend \
          --force-new-deployment
