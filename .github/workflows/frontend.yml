name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/frontend/**'
      - '.github/workflows/frontend.yml'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/frontend/**'
  workflow_dispatch:
    inputs:
      skip_deploy:
        description: 'Skip deployment step'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: public.ecr.aws
  IMAGE_NAME: vgl-frontend

jobs:
  # Node.js Code Quality and Testing
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.12.3

    - name: Cache pnpm dependencies
      uses: actions/cache@v3
      with:
        path: |
          packages/frontend/.pnpm-store
          packages/frontend/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('packages/frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      working-directory: packages/frontend
      run: pnpm install --frozen-lockfile

    - name: Run ESLint
      working-directory: packages/frontend
      run: pnpm lint
      continue-on-error: true

    - name: Run unit tests
      working-directory: packages/frontend
      run: pnpm test
      continue-on-error: true

    - name: Type check
      working-directory: packages/frontend
      run: pnpm nuxi typecheck
      continue-on-error: true

    - name: Build application
      working-directory: packages/frontend
      env:
        NUXT_PUBLIC_API_ENVIRONMENT: prod
        NUXT_PUBLIC_API_BASE_URL_PROD: http://backend:8080
      run: pnpm build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: packages/frontend/.output
        retention-days: 1

  # Docker Build and Security Scan
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: packages/frontend
        file: packages/frontend/Dockerfile
        target: production
        platforms: linux/amd64,linux/arm64
        push: false
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing
  lighthouse:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start mock backend service
      run: |
        # Start a simple mock backend for testing
        docker run -d --name mock-backend \
          -p 8080:8080 \
          -e RESPONSE='{"data":[{"ArtistId":1,"Name":"Test Artist"}]}' \
          mendhak/http-https-echo:latest

    - name: Start frontend service
      run: |
        docker-compose up -d frontend
        sleep 30

    - name: Wait for frontend
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
          http://localhost:3000/artists
          http://localhost:3000/albums
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Stop services
      if: always()
      run: |
        docker-compose down
        docker stop mock-backend || true
        docker rm mock-backend || true

  # Integration Tests with Backend
  integration:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start full stack with docker-compose
      run: |
        docker-compose up -d
        sleep 45

    - name: Wait for services health check
      run: |
        timeout 90 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        timeout 90 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Test frontend-backend integration
      run: |
        # Test that frontend can load and display data from backend
        response=$(curl -s http://localhost:3000)
        if [[ $response =~ "artists\|albums\|genres" ]]; then
          echo "Frontend integration test passed"
        else
          echo "Frontend integration test failed"
          exit 1
        fi

    - name: Test API proxy functionality
      run: |
        # Test that frontend API routes work
        curl -f http://localhost:3000/api/artists
        curl -f http://localhost:3000/api/albums
        curl -f http://localhost:3000/api/genres

    - name: Stop services
      if: always()
      run: docker-compose down

  # Build and Push to ECR (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.skip_deploy != true
    needs: [test, build, lighthouse, integration]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: packages/frontend
        file: packages/frontend/Dockerfile
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to ECS
      env:
        ECR_REGISTRY: ${{ env.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service ${{ secrets.ECS_SERVICE_NAME }}-frontend \
          --force-new-deployment
