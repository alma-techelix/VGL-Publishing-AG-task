name: Security Scan

on:
  schedule:
    # Run security scans daily at 02:00 UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy dependency scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'packages/${{ matrix.package }}'
        format: 'sarif'
        output: 'trivy-${{ matrix.package }}-deps.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.package }}-deps.sarif'

  # Container image scanning
  image-scan:
    runs-on: ubuntu-latest
    needs: dependency-scan

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: packages/${{ matrix.service }}
        file: packages/${{ matrix.service }}/Dockerfile
        target: production
        load: true
        tags: vgl-${{ matrix.service }}:scan

    - name: Run Trivy image scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'vgl-${{ matrix.service }}:scan'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}-image.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}-image.sarif'

  # SAST (Static Application Security Testing)
  sast:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: php, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Docker Bench Security
  docker-bench:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Docker Bench for Security
      uses: docker://docker/docker-bench-security:latest
      with:
        args: -c container_running

    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-bench-results
        path: docker-bench-security.log

  # Infrastructure as Code security scanning
  iac-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov for IaC security
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # Security report aggregation
  security-report:
    needs: [dependency-scan, image-scan, sast, secrets-scan, docker-bench, iac-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Generate security summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Image Scan | ${{ needs.image-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SAST Analysis | ${{ needs.sast.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Bench | ${{ needs.docker-bench.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| IaC Security | ${{ needs.iac-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY
